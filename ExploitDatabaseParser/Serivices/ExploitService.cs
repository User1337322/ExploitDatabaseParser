
using ExploitDatabaseParser.Entity.Models;
using ExploitDatabaseParser.Entity.Repository.Base;
using ExploitDatabaseParser.Events;

namespace ExploitDatabaseParser.Serivices
{
    public class ExploitService
    {
        private readonly IExploitRepository _exploitRepository;
        public event EventHandler<ExploitEventArgs> ExploitAdded;

        public ExploitService(IExploitRepository exploitRepository)
        {
            _exploitRepository = exploitRepository;
        }
        public async Task AddExploitAsync(ExploitModel exploit)
        {
            await _exploitRepository.AddExploitAsync(exploit);
        }
        public async Task DownloadVulnarableApplication(int exploitId, string outFilePath)
        {
            await _exploitRepository.SaveBinaryFile(exploitId, outFilePath);
        }
        public async Task StartParse(string filePath)
        {
            ExploitParser parser = new ExploitParser();
            IEnumerable<string> references = await parser.GetReferencesFromFileAsync(filePath);
            //await Console.Out.WriteLineAsync("References have been readed");
            //List<List<string>> referenceBatches = PartitionList(references.ToList(), 10);

            //List<Task> tasks = new List<Task>();


            //foreach (var batch in referenceBatches)
            //{
            //    List<string> referencesInBatch = batch;
            //    Task task = Task.Run(() => ProcessReferencesAsync(referencesInBatch, parser));
            //    tasks.Add(task);
            //}

            //await Task.WhenAll(tasks);
    
            foreach (string reference in references)
            {
                Thread.Sleep(300);
                var latestExploit = await parser.GetExploitInformation(reference);
                await _exploitRepository.AddExploitAsync(latestExploit);
                ExploitAdded?.Invoke(this, new ExploitEventArgs(latestExploit));
                
            }
        }
        private List<List<T>> PartitionList<T>(List<T> list, int batchSize)
        {
            return Enumerable.Range(0, (list.Count + batchSize - 1) / batchSize)
                             .Select(i => list.Skip(i * batchSize).Take(batchSize).ToList())
                             .ToList();
        }
        private async Task ProcessReferencesAsync(List<string> references, ExploitParser parser)
        {
            foreach (string reference in references)
            {
              
                var latestExploit = await parser.   GetExploitInformation(reference);
                Console.WriteLine(Thread.CurrentThread.ManagedThreadId);
                await _exploitRepository.AddExploitAsync(latestExploit);
                ExploitAdded?.Invoke(this, new ExploitEventArgs(latestExploit));
            }
        }
    }
}
