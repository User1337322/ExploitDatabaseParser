
using ExploitDatabaseParser.Entity.Models;
using ExploitDatabaseParser.Events;
using ExploitDatabaseParser.Serivices;
using ExploitDatabaseParser.View;

namespace ExploitDatabaseParser.Controllers
{
    public class ExploitController
    {
        private readonly ExploitService _service;
        private readonly ExploitView _view;
        public ExploitController(ExploitService service, ExploitView view)
        {
            _service = service;
            _view = view;

            _service.ExploitAdded += OnExploitAdded;
        }
        public async Task AddExploitAsync(ExploitModel exploit)
        {
            await _service.AddExploitAsync(exploit);
            await _view.DisplayRecentlyAddedAsync(exploit);
        }
        public async Task StartParse(string filePath)
        {
            await _service.StartParse(filePath);
        }
        public async Task DownloadVulnarableApplication(int exploitId, string outFilePath)
        {
            await _service.DownloadVulnarableApplication(exploitId, outFilePath);
            await _view.DisplayDownloadMessage(outFilePath);
        }
        //Displaying exploit information (recently added) via using event 
        private async void OnExploitAdded(object sender, ExploitEventArgs e)
        {
            await _view.DisplayRecentlyAddedAsync(e.Exploit);
        }
    }
}
