// <auto-generated />
using System;
using ExploitDatabaseParser;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExploitDatabaseParser.Migrations
{
    [DbContext(typeof(ExploitContext))]
    [Migration("20240421204843_CveTableAdded")]
    partial class CveTableAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ExploitDatabaseParser.Entity.Models.ExploitModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Author")
                        .HasColumnType("longtext");

                    b.Property<string>("CVE")
                        .HasColumnType("longtext");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EDB_Id")
                        .HasColumnType("longtext");

                    b.Property<string>("ExploitUrl")
                        .HasColumnType("longtext");

                    b.Property<bool>("HasApp")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Platform")
                        .HasColumnType("int");

                    b.Property<string>("PlatformName")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("RawCodeFile")
                        .HasColumnType("longblob");

                    b.Property<string>("SourceHref")
                        .HasColumnType("longtext");

                    b.Property<string>("SourceName")
                        .HasColumnType("longtext");

                    b.Property<int>("Tag")
                        .HasColumnType("int");

                    b.Property<string>("TagString")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("TypeString")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("VulnarableApplicationData")
                        .HasColumnType("longblob");

                    b.Property<string>("VulnerableApplicationName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Exploits");
                });

            modelBuilder.Entity("ExploitDatabaseParser.Entity.Models.RelatedCve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ExploitModelId")
                        .HasColumnType("int");

                    b.Property<string>("StringId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ExploitModelId");

                    b.ToTable("RelatedCve");
                });

            modelBuilder.Entity("ExploitDatabaseParser.Entity.Models.RelatedCve", b =>
                {
                    b.HasOne("ExploitDatabaseParser.Entity.Models.ExploitModel", "ExploitModel")
                        .WithMany("RelatedCves")
                        .HasForeignKey("ExploitModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExploitModel");
                });

            modelBuilder.Entity("ExploitDatabaseParser.Entity.Models.ExploitModel", b =>
                {
                    b.Navigation("RelatedCves");
                });
#pragma warning restore 612, 618
        }
    }
}
