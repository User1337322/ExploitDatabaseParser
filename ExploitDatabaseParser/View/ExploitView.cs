using ExploitDatabaseParser.Controllers;
using ExploitDatabaseParser.Entity.Models;
using ExploitDatabaseParser.Entity.Repository;
using ExploitDatabaseParser.Entity.Repository.Base;
using ExploitDatabaseParser.Serivices;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ExploitDatabaseParser.View
{
    public class ExploitView
    {
        public async Task DisplayRecentlyAddedAsync(ExploitModel exploit)
        {
            await Console.Out.WriteLineAsync(new string('-',30));
            await Console.Out.WriteLineAsync("EDB-ID: " + exploit.EDB_Id);
            await Console.Out.WriteLineAsync("CVE: " + exploit.CVE);
            await Console.Out.WriteLineAsync("IsVerified: " + exploit.IsVerified.ToString());
            await Console.Out.WriteLineAsync("");
            await Console.Out.WriteLineAsync("Author: " + exploit.Author);
            await Console.Out.WriteLineAsync("Type: " + exploit.Type.ToString());
            if(exploit.Code != null)
            {
                await Console.Out.WriteLineAsync("Code (first 60 chars): " + new string(exploit.Code.ToString().Take(60).ToArray()));
            }

            await Console.Out.WriteLineAsync("");
            await Console.Out.WriteLineAsync("Platform: " + exploit.Platform.ToString());
            await Console.Out.WriteLineAsync("Date: " + exploit.Date.ToShortDateString());
            await Console.Out.WriteLineAsync("HasApp: " + exploit.HasApp.ToString());

        }
        public async Task DisplayDownloadMessage(string outFilePath)
        {
            await Console.Out.WriteLineAsync("Application saved on path : " + outFilePath);
        }
    }
}
