using ExploitDatabaseParser;
using ExploitDatabaseParser.Controllers;
using ExploitDatabaseParser.Entity.Repository.Base;
using ExploitDatabaseParser.Entity.Repository;
using ExploitDatabaseParser.Serivices;
using ExploitDatabaseParser.View;
using System.ComponentModel;

internal class Program
{
    private static string filePath = "ExploitReferences.txt";
    private async static Task Main(string[] args)
    {
        ExploitContext context = new ExploitContext();
        IExploitRepository exploitRepository = new ExploitRepository(context);
        ExploitService exploitService = new ExploitService(exploitRepository);
        ExploitView exploitView = new ExploitView();
        ExploitController exploitController = new ExploitController(exploitService, exploitView);
        //   await exploitController.StartParse(filePath);

        while (true)
        {
            await DisplayUserMenu();
            string inputString = Console.ReadLine();
            if (inputString != null && !string.IsNullOrEmpty(inputString))
            {
                int pickValue = int.Parse(inputString);
                switch (pickValue)
                {
                    case 1:
                        int exploitId = 185;
                        string outFilePath = "D:\\";
                        await exploitController.DownloadVulnarableApplication(exploitId, outFilePath);
                        break;
                    case 2:
                        await exploitController.StartParse(filePath);
                        break;
                    default:
                        await Console.Out.WriteLineAsync("Wrong choice, try again");
                        break;
                }
            }
            else
                await Console.Out.WriteLineAsync("Incorrect value provided");
        }

    }
    private static async Task DisplayUserMenu()
    {
        await Console.Out.WriteLineAsync("Pick the oprion");
        await Console.Out.WriteLineAsync("1 - download vulnarable application");
        await Console.Out.WriteLineAsync("2 - start parse");
    }
}