using ExploitDatabaseParser;
using HtmlAgilityPack;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using PuppeteerSharp;
using System.Net;

internal class Program
{
    private static HtmlWeb web = new HtmlWeb();
    //Find proxy server for changing request 
    private static List<string> GenerateReferences()
    {
        string url = "https://www.exploit-db.com/exploits/";
        List<string> references = new List<string>();
        for(int i = 100000; i <= 110000; i++)
            references.Add(url + i.ToString());

        return references;
    }
    private async static Task Main(string[] args)
    {
        List<string> references = GenerateReferences();

        web.PreRequest += request =>
        {
            request.Timeout = 900000000;
            return true;
        };
        foreach (var referenceItem in references)
        {
           // Thread.Sleep(100);
            await AddToDatabaseAsync(await GetInformation(referenceItem));
        }

    }
    private async static Task<Exploit> GetInformation(string reference)
    {
        Console.WriteLine(new string('_',30));
        Exploit exploit = new Exploit();

        HtmlDocument document = await web.LoadFromWebAsync(reference);

        var h6Nodes = document.DocumentNode.SelectNodes("//div[@class='col-6 text-center']/h6[@class='stats-title']");

        if (h6Nodes != null && h6Nodes.Count >= 2)
        {
            string id = h6Nodes[0].InnerText.Trim();
            string cveStringId = h6Nodes[1].InnerText.Trim();

            string author = h6Nodes[2].InnerText.Trim();
            string type = h6Nodes[3].InnerText.Trim();
            
            string platform = h6Nodes[4].InnerText.Trim();
            string date = h6Nodes[5].InnerText.Trim();

            Console.WriteLine("Id: " + id);
            Console.WriteLine("cveStringId: " + cveStringId);
            Console.WriteLine("author: " + author);
            Console.WriteLine("type: " + type);
            Console.WriteLine("platform: " + platform);
            Console.WriteLine("date: " + date);
            exploit.InExploitDbId = int.Parse(id);
            exploit.CveStringId = "CVE-"+cveStringId;
            exploit.Author = author;
            exploit.Type = type;
            exploit.Platform = platform;
            exploit.Date = DateTime.Parse(date);
        }

        var codeToolbarNode = document.DocumentNode.SelectNodes("//div[@class='card-body']");

        if (codeToolbarNode != null && codeToolbarNode.Count > 1)
        {
            string codeText = codeToolbarNode[1].InnerText.Trim();
            exploit.Code = codeText;
        }

        return exploit;
    }
    private async static Task AddToDatabaseAsync(Exploit exploit)
    {
        using (ExploitContext context = new ExploitContext())
        {
            await context.Exploits!.AddAsync(exploit);
            await context.SaveChangesAsync();
        }
    }
   
}