using ExploitDatabaseParser.Entity.Models;
using ExploitDatabaseParser.Entity.Repository.Base;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ExploitDatabaseParser.Entity.Repository
{
    public class ExploitRepository : IExploitRepository
    {
        private readonly ExploitContext _context;
        public ExploitRepository(ExploitContext context)
        {
            _context = context;
        }

        public async Task AddExploitAsync(ExploitModel exploit)
        {
            await _context.Exploits.AddAsync(exploit);
            await _context.SaveChangesAsync();
        }       

        public async Task AddRange(IEnumerable<ExploitModel> exploitsRange)
        {
            await _context.AddRangeAsync(exploitsRange);
            await _context.SaveChangesAsync();
        }

        public IEnumerable<ExploitModel> GetAll()
        {
            return _context.Exploits;
        }

        public async Task<ExploitModel> GetById(int id)
        {
            return await _context.Exploits.FindAsync(id);
        }

        public IEnumerable<ExploitModel> GetRange(int skip, int take)
        {
            return _context.Exploits.Skip(skip).Take(take);
        }

        public  async Task SaveBinaryFile(int ExploitId, string outFilePath)
        {
            var exploit = await _context.Exploits.FindAsync(ExploitId);
           
            if (exploit.VulnarableApplicationData != null)
            {
                await File.WriteAllBytesAsync(outFilePath + exploit.VulnerableApplicationName, exploit.VulnarableApplicationData);
            }
        }

        public void ShowStatistics()
        {
            throw new NotImplementedException();
        }

        public void StartParsing()
        {
            throw new NotImplementedException();
        }

    }
}
